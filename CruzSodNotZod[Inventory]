/* AUTHOR: Cameron Cruz
 * COURSE: CPT 187
 * PURPOSE: Manage the work behind the inventory (involves sorting and searching inventory)
 * CREATE DATE: 2/17/2021
 */

package edu.cpt187.cruz.exercise6;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;

public class Inventory 
{
	//declare and initialize class constants
	private final String[] DISCOUNT_NAMES = {"Member", "Senior", "No Discount"};
	private final double[] DISCOUNT_RATES = {0.15, 0.25, 0.0};
	private final String[] PRIZE_NAMES = {"Rock", "Paper", "Scissors"};
	private final int MAX_RECORDS = 35;
	private final int NOT_FOUND = -1;
	private final int ONE = 1;
	private final int RESET_VALUE = 0;

	//declare and initialize non-constant class attribute
	private int[] itemIDs = new int[MAX_RECORDS];
	private String[] itemNames = new String[MAX_RECORDS];
	private double[] itemPrices = new double[MAX_RECORDS];
	private int[] orderQuantities = new int[MAX_RECORDS];
	private double[] orderTotals = new double[MAX_RECORDS];
	private int[] inStockCounts = new int[MAX_RECORDS];
	private int itemSearchIndex = 0;
	private int recordCount = 0;

	//declare and initialize random object
	private Random prizeGenerator = new Random();

	//Inventory class constructor
	public Inventory()
	{
	}//end of Inventory constructor
	
	//SETTERS**********
	
	/*sets instockCounts of the specified index, to the updated amount by subtracting how many
	from the in stock count at the specified index*/
	public void setReduceStock(int borrowedHowMany)
	{
		inStockCounts[itemSearchIndex] = inStockCounts[itemSearchIndex] - borrowedHowMany;
	}//END of setReduceStock
	
	//loads items into element arrays
	public void setLoadItems(String borrowedFileName)
	{
		try
		{
			//statement to attempt to open the file
			Scanner infile = new Scanner(new FileInputStream(borrowedFileName));
			//resets record count, if file opens successfully
			recordCount = RESET_VALUE;
			//while loop to test if there is more data to assign, and make sure 
			//record count doesn't exceed MAX_RECORDS
			while(infile.hasNext() == true && recordCount < MAX_RECORDS)
			{
				//assigning values to the array elements based on file contents
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				inStockCounts[recordCount] = infile.nextInt();
				//increments record count
				recordCount++;
			}//END of while loop
			
			//close file
			infile.close();
			
			//sorts the elements in the arrays
			setBubbleSort();
			
		}//END of try
		catch(IOException ex)
		{
			//if the file isn't opened or found, not found is set to record count
			recordCount = NOT_FOUND;
		}//END of catch
	}//END of setLoadItems
	
	//loads items into element arrays (overloaded)
	public void setLoadItems(String borrowedFileName, int borrowedSize)
	{
		try
		{
			//statement to attempt to open the file
			Scanner infile = new Scanner(new FileInputStream(borrowedFileName));
			//resets record count, if file opens successfully
			recordCount = RESET_VALUE;
			//while loop to test if there is more data to assign, and make sure 
			//record count doesn't exceed MAX_RECORDS
			while(infile.hasNext() == true && recordCount < MAX_RECORDS && recordCount < borrowedSize)
			{
				//assigning values to the array elements based on file contents
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				orderQuantities[recordCount] = infile.nextInt();
				orderTotals[recordCount] = infile.nextDouble();
				
				//increments record count
				recordCount++;
				
			}//END of while loop
			
			//close file
			infile.close();
			
		}//END of try
		catch(IOException ex)
		{
			//if the file isn't opened or found, not found is set to record count
			recordCount = NOT_FOUND;
		}//END of catch
	}//END of setLoadItems (overloaded)
	
	public void setSearchIndex(int borrowedID)
	{
		itemSearchIndex = getSearchResults(borrowedID);
	}//END of setSearchIndex
	
	public void setBubbleSort()
	{		
		//declare and initialize local variables
		int localIndex = 0;
		int localLast = 0;
		boolean localSwap = false;
		
		//assignment statement for local last
		localLast = recordCount - ONE;
		
		while(localLast > RESET_VALUE)
		{
			//assignment statements
			localIndex = RESET_VALUE;
			localSwap = false;
			
			//nested while loop
			while(localIndex < localLast)
			{
				if(itemIDs[localIndex] > itemIDs[localIndex + ONE])
				{
					//calls the swapping method to swap the proper elements in the array
					setSwapArrayElements(localIndex);
					
					//sets localSwap to true
					localSwap = true;
				}
				//increment localIndex
				localIndex++;
			}//END of nested while
			
			if(localSwap == false)
			{
				//assign 0 to localLast
				localLast = RESET_VALUE;
			}//END of if
			else
			{
				//decrement localLast
				localLast--;
			}//END of else
		}//END of while loop
	}//END of setBubbleSort
	
	public void setSwapArrayElements(int borrowedIndex)
	{
		//declare and initialize local variables
		int localItemID = 0;
		String localItemName = "";
		double localItemPrice = 0.0;
		int localInStockCounts = 0;
		int localOrderQuantity = 0;
		double localOrderTotal = 0.0;
		
		//sorting logic A=B, B=C, C=A
		localItemID = itemIDs[borrowedIndex];
		itemIDs[borrowedIndex] = itemIDs[borrowedIndex + ONE];
		itemIDs[borrowedIndex + ONE] = localItemID;
		
		//swapping item names
		localItemName = itemNames[borrowedIndex];
		itemNames[borrowedIndex] = itemNames[borrowedIndex + ONE];
		itemNames[borrowedIndex + ONE] = localItemName;
		
		//swapping item prices
		localItemPrice = itemPrices[borrowedIndex];
		itemPrices[borrowedIndex] = itemPrices[borrowedIndex + ONE];
		itemPrices[borrowedIndex + ONE] = localItemPrice;
		
		//swapping in stock counts
		localInStockCounts = inStockCounts[borrowedIndex];
		inStockCounts[borrowedIndex] = inStockCounts[borrowedIndex + ONE];
		inStockCounts[borrowedIndex + ONE] = localInStockCounts;
		
		//swapping order quantities
		localOrderQuantity = orderQuantities[borrowedIndex];
		orderQuantities[borrowedIndex] = orderQuantities[borrowedIndex + ONE];
		orderQuantities[borrowedIndex + ONE] = localOrderQuantity;
		
		//swapping order totals
		localOrderTotal = orderTotals[borrowedIndex];
		orderTotals[borrowedIndex] = orderTotals[borrowedIndex + ONE];
		orderTotals[borrowedIndex + ONE] = localOrderTotal;
	}//END of setSwapArrayElements
	
	//GETTERS**********
	
	//returns inStockAccounts array
	public int[] getInStockCounts()
	{
		return inStockCounts;
	}//END of getInStockCounts
	
	//returns item IDs array
	public int[] getItemIDs()
	{
		return itemIDs;
	}//END of getItemIDs
	
	//returns item names array
	public String[] getItemNames()
	{
		return itemNames;
	}//END of getItemNames
	
	//returns item prices array
	public double[] getItemPrices()
	{
		return itemPrices;
	}//END of getItemPrices
	
	//returns discount names
	public String[] getDiscountNames()
	{
		return DISCOUNT_NAMES;
	}//END of getDiscountNames
	
	//returns discount rates
	public double[] getDiscountRates()
	{
		return DISCOUNT_RATES;
	}//END of getDiscountRates
	
	//returns order quantities
	public int[] getOrderQuantities()
	{
		return orderQuantities;
	}//END of getOrderQuantities
	
	//return order totals
	public double[] getOrderTotals()
	{
		return orderTotals;
	}//END of getOrderTotals
	
	//returns prize names
	public String[] getPrizeNames()
	{
		return PRIZE_NAMES;
	}//END of getPrizeNames
	
	//returns a random number (seeded with prize names array length)
	public int getRandomNumber()
	{
		return prizeGenerator.nextInt(PRIZE_NAMES.length);
	}//END of getRandomNumber
	
	//returns Max records
	public int getMaxRecords()
	{
		return MAX_RECORDS;
	}//END of getMaxRecords
	
	//returns the item search index
	public int getItemSearchIndex()
	{
		return itemSearchIndex;
	}//END of getItemSearchIndex
	
	public int getRecordCount()
	{
		return recordCount;
	}//END of getRecordCount
	
	public double getGrandTotal()
	{	
		//declare and initialize local variables
		int localIndex = 0;
		double localGrandTotal = 0.0;
		
		while(localIndex < orderTotals.length)
		{
			//eventually will add up all of order totals
			localGrandTotal = localGrandTotal + orderTotals[localIndex];
			
			//increment localIndex
			localIndex++;
		}//END of while loop
		return localGrandTotal;
	}//END of getGrandTotal
	
	public int getSearchResults(int borrowedBorrowedID)
	{
		//declare and initialize local constant
		final int TWO = 2;
		
		//declare and initialize local variables
		int localFirst = 0;
		int localMid = 0;
		int localLast = 0;
		boolean localFound = false;
		
		//assignment statement
		localLast = recordCount - ONE;
		
		while(localFirst <= localLast && localFound == false)
		{
			//assign localMid
			localMid = (localFirst + localLast) / TWO;
			
			if(itemIDs[localMid] == borrowedBorrowedID)
			{
				//element found
				localFound = true;
			}//END of if
			else 
			{
				if(itemIDs[localMid] < borrowedBorrowedID)
				{
					//assign localFirst to localMid plus one
					localFirst = localMid + ONE;
				}//END of nested if
				else
				{
					//assign localLast to localMid minus one
					localLast = localMid - ONE;
				}//END of nested else
			}//END of else

		}//END of while
		
		if(localFound == false)
		{
			//assign localMid to not found
			localMid = NOT_FOUND;
		}//end of if
		
		return localMid;	
	}//END of getSearchResults	
	
}//END of Inventory Class
